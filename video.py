
import os
import subprocess
import shutil

from config import ASS_VIDEO_GENERATOR_PATH, GENERATE_VIDEO_PATHS
from config import CURRENT_ALBUM, CURRENT_ALBUM_1, CURRENT_ALBUM_2, CURRENT_ALBUM_3, CURRENT_ALBUM_4, CURRENT_ALBUM_5, CURRENT_ALBUM_6, CURRENT_ALBUM_7, CURRENT_ALBUM_8
from config import FILE_MAP, FILE_MAP_1, FILE_MAP_2, FILE_MAP_3, FILE_MAP_4, FILE_MAP_5, FILE_MAP_6, FILE_MAP_7, FILE_MAP_8

def decodeVersionWems():
    print("[Main] decoding wems...")
    for root, dirs, files in os.walk("output/1.5audio"):
        for file in files:
            if file.endswith(".wem"):
                path = root.replace("\\", "/") + "/" + file
                short_path = path.replace("output/1.5audio/", "").replace("wem", "wav")
                if not os.path.exists(f"output/1.5audio/{short_path}"):
                    os.makedirs(os.path.dirname(f"output/1.5audio/{short_path}"), exist_ok=True)
                subprocess.run(
                    ["./vgmstream/vgmstream-cli", path, "-o", f"output/1.5audio/{short_path}"])

def elegantCopy(source, dest):
    if not os.path.exists(f"{dest}"):
        os.makedirs(os.path.dirname(dest), exist_ok=True)
    if os.path.exists(f"{source}"):
        shutil.copy2(f"{source}", f"{dest}")
        return True
    return False

def getTitleAndAlbum(filename, path):
    album = ''
    name = ''
    if FILE_MAP_8[filename] and not FILE_MAP_7[filename]:
        name = FILE_MAP_8[filename]
        album = CURRENT_ALBUM_8
    if FILE_MAP_7[filename] and not FILE_MAP_6[filename]:
        name = FILE_MAP_7[filename]
        album = CURRENT_ALBUM_7
    if FILE_MAP_6[filename] and not FILE_MAP_5[filename]:
        name = FILE_MAP_6[filename]
        album = CURRENT_ALBUM_6
    elif FILE_MAP_5[filename] and not FILE_MAP_4[filename]:
        name = FILE_MAP_5[filename]
        album = CURRENT_ALBUM_5
    elif FILE_MAP_4[filename] and not FILE_MAP_3[filename]:
        name = FILE_MAP_4[filename]
        album = CURRENT_ALBUM_4
    elif FILE_MAP_3[filename] and not FILE_MAP_2[filename]:
        name = FILE_MAP_3[filename]
        album = CURRENT_ALBUM_3
    elif FILE_MAP_2[filename] and not FILE_MAP_1[filename]:
        name = FILE_MAP_2[filename]
        album = CURRENT_ALBUM_2
    elif FILE_MAP_1[filename] and not FILE_MAP[filename]:
        name = FILE_MAP_1[filename]
        album = CURRENT_ALBUM_1
    elif FILE_MAP[filename]:
        name = FILE_MAP[filename]
        album = CURRENT_ALBUM
    return name, os.path.relpath(f"input/{album}", os.path.dirname(path))

def buildAss():
    if not os.path.exists("output/1.5audio_stage"):
        os.mkdir("output/1.5audio_stage")

    for root, dirs, files in os.walk("output/1.5audio"):
        for file in files:
            if file.endswith(".wav") and os.path.basename(file) in FILE_MAP.keys():
                path = root.replace("output/1.5audio", "output/1.5audio_stage") + "/" + file
                elegantCopy(root + "/" + file, path)
                assPath = path.replace(".wav", ".ass")
                assTitle, assAlbum = getTitleAndAlbum(os.path.basename(file), path)
                # assTitle = FILE_MAP[os.path.basename(file)]
                # assAlbum = os.path.relpath(f"input/{CURRENT_ALBUM}", os.path.dirname(path))
                assContent = f"[Script Info]\n\
; Script generated by Aegisub 9706-cibuilds-20caaabc0\n\
; http://www.aegisub.org/\n\
Title: {assTitle}\n\
ScriptType: v4.00+\n\
WrapStyle: 0\n\
ScaledBorderAndShadow: yes\n\
YCbCr Matrix: TV.709\n\
PlayResX: 3840\n\
PlayResY: 2160\n\
\n\
[Aegisub Project Garbage]\n\
Audio File: {os.path.basename(file)}\n\
Video AR Mode: 4\n\
Video AR Value: 1.777778\n\
Video Zoom Percent: 0.250000\n\
Active Line: 1\n\
Video Position: 125\n\
\n\
[V4+ Styles]\n\
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n\
Style: Default,Arial,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1\n\
\n\
[Events]\n\
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n\
Comment: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,#meta music-visualizer\n\
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,title={assTitle}\n\
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,album={assAlbum}\n\
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,resolution=3840x2160\n\
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,fade=1\n\
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,args:c:v=copy\n\
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,args:c:a=pcm_s32le\n\
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,args:ar=48000"

                with open(assPath, "w", encoding="utf-8") as f:
                    f.write(assContent)

def generateVideo(reverse=False):
    if not os.path.exists("output/video"):
        os.mkdir("output/video")

    for path in GENERATE_VIDEO_PATHS:
        for root, dirs, files in os.walk(path, topdown=True):
            if reverse:
                dirs.reverse()
                files.reverse()
            for file in files:
                if file.endswith(".ass"):
                    assTitle, assAlbum = getTitleAndAlbum(os.path.basename(file.replace(".ass", ".wav")), path)
                    if os.path.exists(f"output/video/{assTitle.replace(" | ", "｜")}.mkv"):
                        print(f"[Video] Skipped {assTitle.replace(" | ", "｜")}.mkv")
                        continue
                    else:
                        print(f"[Video] Processing {assTitle.replace(" | ", "｜")}.mkv")
                    absolutePath = os.path.abspath(root + "/" + file).replace("\\", "/")
                    subprocess.run(f'yarn run render "{absolutePath}"', cwd=ASS_VIDEO_GENERATOR_PATH,
                                   encoding='utf-8', shell=True)
                    print(root + "/" + file.replace(".ass", ".subtitle.mkv"), f"output/video/{assTitle}.mkv")
                    elegantCopy(root + "/" + file.replace(".ass", ".subtitle.mkv"), f"output/video/{assTitle.replace(" | ", "｜")}.mkv")



    # absolutePath = os.path.abspath("output/audio/Silence Wav.ass")
    # subprocess.run(['yarn', 'run', 'render', f'{absolutePath}'], cwd=ASS_VIDEO_GENERATOR_PATH, encoding='utf-8', shell=True)
    # # move Silence Wav.subtitle.mkv file into output/video under same folder tree but change name to FILE_MAP[os.path.basename('Silence Wav')]
    # elegantCopy("output/audio/Silence Wav.subtitle.mkv", "output/video/静音.mkv")